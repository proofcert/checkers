accumulate lists.
accumulate debug.
accumulate resolution_steps.

run :-
  problemCert Name F Cert (map Map) C,
  print "Running on problem ", print Name, print ":\n",
  resolveCert Map F Cert C.


run :-
  problem Name F Cert (map Map),
  print "Running on problem ", print Name, print ":\n",
  resolve Map F Cert.

run :-
  modalProblem Name ModalForm Cert,
  print "Running on problem ", print Name, print ":\n",
  modalToLK ModalForm LKForm,
  resolve [] (LKForm zero) Cert.

resolve [] F Cert :-
  if (entry_point Cert F)
      (print "Success\n==============================================\n")
		  (print "Fail\n", halt), fail.
resolve [(pr I C) | R] F Cert :-
  mapsto I C => resolve R F Cert.

resolveCert [] F Cert CertOut :-
  if (entry_point Cert F)
      (print "Success\n==============================================\n", term_to_string CertOut S, print S)
		  (print "Fail\n", halt), fail.
resolveCert [(pr I C) | R] F Cert  CertOut :-
  mapsto I C => resolve R F Cert.


% x\ p (q x)
% (x\ (some (y\ ( (p (rel x y)) &+& (d-(DelA y))))))

% (x\ (some (y\ ( (p (rel x y)) &+& (d-(p (q y)))))))

% (some (y\ ( (p (rel zero y)) &+& (d-(p (q y))))))
%  some (W1\ p (rel zero W1) &+& d- (p (q W1)))

% ((d+ (some (W1\ p (rel zero W1) &+& d- (d+ (n (q W1))))) !-! d+ (all (W1\ n (rel zero W1) !-! d+ (p (q W1)))))
% ( (dia (-- q)) !! (box (++ q)) )


