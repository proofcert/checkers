of X Y :- is_flex X, !, $delay (of X Y) X.
of X Y :- of_ X Y.
of_ (app M N) B :- of M (impl A B), of N A.
of_ (lam F) (impl A B) :- pi x\ of_ x A => of (F x) B.

propagate [of X T1] [of X T2] (T1 = T2).

main :- of X T1, of X nat, $print "The type is " T1.

% NOTE: the following should fail because of occur-check, but it
% does not. It creates a cyclic term. There is a bug with occur check!
% of (app X X) T.
