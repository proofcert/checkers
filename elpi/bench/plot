#!/usr/bin/lua5.1

file = assert(io.open(arg[1]),"Argument missing: .csv file name")
data = {}
for l in file:lines() do
	local ok,runner,job,it,wc,_,mem =
	 l:match('^([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),?$')
	assert(runner and job and wc and mem and it, "format error: " .. l)
	job = job:match('([^/]+)$'):gsub("%.elpi$","")
	local m,s,c = wc:match('^(%d+):(%d+)%.(%d+)$')
	wc = c + s*100 + m*60*100
	local s1,c1 = it:match('^(%d+)%.(%d%d).$')
	s = s1 or s
	c = c1 or c
	it = c + s*100
	mem = mem:gsub('k$','')
	if ok == "KO" then mem = 0 end -- kill failed tests
	local item = data[job] or {}
	local wcl = (item[runner] or {}).time or {}
	wcl[#wcl+1] = wc
	local itl = (item[runner] or {}).itime or {}
	itl[#itl+1] = it
	item[runner] = { time = wcl; mem = tonumber(mem); itime = itl }
	data[job] = item
end

all_runners = {}
all_jobs = {}
for job, runners in pairs(data) do
	for runner, _ in pairs(runners) do
		all_runners[runner] = true
	end
	all_jobs[#all_jobs+1] = job
end
table.sort(all_jobs,function(j1,j2) return j1 < j2 end)

pname = arg[2] or arg[1]
out = assert(io.open(pname..'.dat','w'), 'Unable to open output file')

function average(l)
	local t = 0
	for _,v in ipairs(l) do t = t + v end
	return t / #l
end

for i,job in ipairs(all_jobs) do
	local runners = data[job]
	out:write(i,' ',job,' ')
	local fastest = 99999999999999
	for runner, _ in pairs(all_runners) do
		local runner_data =
		  runners[runner] or { time = {0}; mem = 0; itime = {0} }
                local t = average(runner_data.itime)
		if t < fastest and runner_data.mem ~= 0 then fastest = t end
	end
	for runner, _ in pairs(all_runners) do
		local runner_data =
		  runners[runner] or { time = {0}; mem = 0; itime = {0} }
	 	local delta = -(average(runner_data.itime) - fastest)
		if runner_data.mem == 0 then delta = 0 end
		out:write(runner,' ',average(runner_data.time),' ',
		                     average(runner_data.itime),' ',
		                     delta,' ',
				     runner_data.mem,' ')
	end
	out:write('\n')
end
out:close()

plot = assert(io.open(pname..'.plot','w'), 'Unable to write to output file')
plot:write([[
set terminal svg background rgb 'white' size ]]..math.max(#all_jobs*30,300)..[[, 2000
set xrange [0:]]..(#all_jobs+2)..[[]
set y2range [0:]
set xtics rotate by 90 right
set xlabel "test"
set y2tics
set grid mytics 
set grid ytics
set grid y2tics
set mytics
set linetype 1 lc rgb "#FF0000"
set linetype 2 lc rgb "#006600"
set linetype 3 lc rgb "#3300CC"
set linetype 4 lc rgb "#DDDD66"
set linetype 5 lc rgb "#66FFFF"
set linetype 6 lc rgb "#6666FF"
set style fill solid 0.4
set key right bottom
set boxwidth 0.1 absolute
set output "]]..pname..[[.svg"
plot \
]])
i=1
for runner, _ in pairs(all_runners) do
	local tics = ""
	if i == 1 then tics = ':xtic(2)' end
	local pos = '$1+' .. string.format("%3.1f",(i-1) * 0.2)
        plot:write('"'..pname..'.dat" \\\n')
	local start = string.format("%d:%d",2+(i-1)*5+3,2+(i-1)*5+2)
	local stop = string.format("%d:(0)",2+(i-1)*5+4)
	plot:write('using ('..pos..'):'..start..':'..stop..tics..' with candlesticks title "'..  runner..'", \\\n')
	i=i+1
end
i=1
for runner, _ in pairs(all_runners) do
	local pos = '$1+' .. string.format("%3.1f",(i-1) * 0.2)
        plot:write('"'..pname..'.dat" \\\n')
	local start = string.format("%d",2+(i-1)*5+5)
	plot:write('using ('..pos..'):'..start..' with boxes lw 0 fill solid 0.2 axes x1y2 title "'..  runner..'", \\\n')
	i=i+1
end
plot:close()
